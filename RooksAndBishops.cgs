singleton class f_bishop1 extends game.grid.GridRuleset

  // Define a nested class to represent specific positions
  class Position(grid as Grid) extends GridGame

    // Define the options of this position
    override def Options(player as Player) begin

      var us := player.Ordinal;
      var them := player.Opponent.Ordinal;

      var directions := if player == Left then Coordinates.Orthogonal else Coordinates.Diagonal end;

      for coord in (grid FindAll us)              // For each coordinate that matches the player's color ...
      for direction in directions                 // ... and for each direction (orthogonal for black and diagonal for white) ...
      where grid[coord + direction] == them       // ... such that an opposing stone is adjacent in that direction ...
      yield
        // Generate an option by updating the grid, replacing the stone at
        // `coord` with an empty space and the stone at `coord + direction`
        // with a stone of the player's color.
        Position(grid Updated { coord => 0, coord + direction => us })
      end

    end

  end

  // Define the characters used to represent blank spaces, black stones,
  // and white stones when Clobber positions are created
  override def CharMap := ".xo";

  // Define the icons used to display blank spaces, black stones, and
  // white stones when Clobber positions are displayed
  override def Icons := [Icon.Blank, Icon.BlackRook, Icon.WhiteBishop];

end
